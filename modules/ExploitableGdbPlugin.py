#!/usr/bin/env python2.7
'''
    AFL crash analyzer, crash triage for the American Fuzzy Lop fuzzer
    Copyright (C) 2015  floyd

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

Created on Apr 13, 2015
@author: floyd, http://floyd.ch, @floyd_ch
'''
import shutil
import os
import glob
from utilities.Logger import Logger


class ExploitableGdbPlugin:
    #If you wrote the gdb output to a different directory than where the input crash file lived, 
    #I'm sorry, you can not use this class
    classifications = ["EXPLOITABLE", "PROBABLY_EXPLOITABLE", "PROBABLY_NOT_EXPLOITABLE", "UNKNOWN" ]

    def __init__(self, config, search_dir, output_dir=None):
        self.config = config
        self.search_dir = search_dir
        #output directory will be just the same place where the input file is if output_dir is None
        self.output_dir = output_dir
    
    @staticmethod
    def get_classifications():
        return ExploitableGdbPlugin.classifications
    
    def divide_by_exploitability(self, function=shutil.move):
        if self.output_dir is not None and not os.path.exists(self.output_dir):
            os.mkdir(self.output_dir)
        for path, _, files in os.walk(self.search_dir):
            for filename in files:
                if filename.endswith(self.config.run_extension):
                    continue
                filepath = os.path.join(path, filename)
                gdb_out_filepath = filepath+self.config.get_gdb_exploitable_file_extension()
                if os.path.exists(gdb_out_filepath):
                    file_content = file(gdb_out_filepath, "rb").read()
                    for classification in self.classifications:
                        if classification in file_content:
                            if self.output_dir is None:
                                out_dir = os.path.join(path, classification) + os.path.sep
                            else:
                                out_dir = os.path.join(self.output_dir, classification) + os.path.sep
                            if not os.path.exists(out_dir):
                                os.mkdir(out_dir)
                            Logger.debug("Moving", filepath+"* to", out_dir, debug_level=4)
                            for file_all_extensions in glob.glob(filepath+"*"):
                                function(file_all_extensions, out_dir)
                            break
                else:
                    Logger.warning("Seems like there is no gdb output file %s, can not find exploitability" % gdb_out_filepath)
    
    def _get_search_string_for_classification(self, classification):
        return "Exploitability Classification: "+classification